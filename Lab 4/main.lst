


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: **-UUU-*Your Names**update this***
                       
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 1/18/2019
    5 00000000         ; You are given a simple stepper motor software system w
                       ith one input and
    6 00000000         ; four outputs. This program runs, but you are asked to 
                       add minimally intrusive
    7 00000000         ; debugging instruments to verify it is running properly
                       . 
    8 00000000         ;   If the input PA4 is low, the stepper motor outputs c
                       ycle 10,6,5,9,...
    9 00000000         ;   If the input PA4 is high, the stepper motor outputs 
                       cycle 5,6,10,9,...
   10 00000000         ;   Insert debugging instruments which gather data (stat
                       e and timing)
   11 00000000         ;   to verify that the system is functioning as expected
                       .
   12 00000000         ; Hardware connections (External: One button and four ou
                       tputs to stepper motor)
   13 00000000         ;  PA4 is Button input  (1 means pressed, 0 means not pr
                       essed)
   14 00000000         ;  PE3-0 are stepper motor outputs 
   15 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   16 00000000         ; Instrumentation data to be gathered is as follows:
   17 00000000         ; After every output to Port E, collect one state and ti
                       me entry. 
   18 00000000         ; The state information is the 5 bits on Port A bit 4 an
                       d Port E PE3-0
   19 00000000         ;   place one 8-bit entry in your Data Buffer  
   20 00000000         ; The time information is the 24-bit time difference bet
                       ween this output and the previous (in 12.5ns units)
   21 00000000         ;   place one 32-bit entry in the Time Buffer
   22 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   23 00000000         ;    you must handle the roll over as Current goes 3,2,1
                       ,0,0x00FFFFFF,0xFFFFFE,
   24 00000000         ; Note: The size of both buffers is 100 entries. Once yo
                       u fill these
   25 00000000         ;       entries you should stop collecting data
   26 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   27 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   28 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   29 00000000         
   30 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   31 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   32 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   33 00000000 40004400 
                       GPIO_PORTA_DIR_R



ARM Macro Assembler    Page 2 


                               EQU              0x40004400
   34 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   35 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   36 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   37 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   38 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   39 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000         
   42 00000000         ; RAM Area
   43 00000000                 AREA             DATA, ALIGN=2
   44 00000000 00 00 00 
              00       Index   SPACE            4           ; index into Steppe
                                                            r table 0,1,2,3
   45 00000004 00 00 00 
              00       Direction
                               SPACE            4           ; -1 for CCW, 0 for
                                                             stop 1 for CW
   46 00000008         
   47 00000008         
   48 00000008         ;place your debug variables in RAM here
   49 00000008         
   50 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       States  SPACE            100
   51 0000006C 00000000 
                       Seperator
                               DCD              0
   52 00000070 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Times   SPACE            400
   53 00000200         
   54 00000200 00      dataIndexCount
                               DCB              0
   55 00000201         
   56 00000201 00 00 00 
              00FFFFFF prevTimeMeasure
                               DCD              0x00FFFFFF
   57 00000208         
   58 00000208 00000001 
                       LEDCountDown
                               DCD              1
   59 0000020C         
   60 0000020C         
   61 0000020C 000000FF 
                       FULLF2  EQU              0xFF
   62 0000020C FFFFFFFF 
                       FULLF   EQU              0xFFFFFFFF
   63 0000020C 00FFFFFF 
                       MASK24BIT
                               EQU              0x00FFFFFF
   64 0000020C         
   65 0000020C         
   66 0000020C         ; ROM Area
   67 0000020C                 IMPORT           TExaS_Init
   68 0000020C                 IMPORT           SysTick_Init
   69 0000020C         ;-UUU-Import routine(s) from other assembly files (like 
                       SysTick.s) here
   70 0000020C                 AREA             |.text|, CODE, READONLY, ALIGN=
2



ARM Macro Assembler    Page 6 


   71 00000000                 THUMB
   72 00000000 05 06 0A 
              09       Stepper DCB              5,6,10,9
   73 00000004                 EXPORT           Start
   74 00000004         
   75 00000004         Start
   76 00000004         ; TExaS_Init sets bus clock at 80 MHz
   77 00000004         ; PA4, PE3-PE0 out logic analyzer to TExasDisplay
   78 00000004 487E            LDR              R0,=SendDataToLogicAnalyzer
   79 00000006 F040 0001       ORR              R0,R0,#1
   80 0000000A F7FF FFFE       BL               TExaS_Init  ; logic analyzer, 8
                                                            0 MHz
   81 0000000E         ;place your initializations here
   82 0000000E F000 F81F       BL               Stepper_Init ; initialize stepp
                                                            er motor
   83 00000012 F000 F837       BL               Switch_Init ; initialize switch
                                                             input
   84 00000016         ;**********************
   85 00000016 F000 F85A       BL               Debug_Init  ;(you write this)
   86 0000001A         ;**********************
   87 0000001A B662            CPSIE            I           ; TExaS logic analy
                                                            zer runs on interru
                                                            pts
   88 0000001C F04F 0500       MOV              R5,#0       ; last PA4
   89 00000020         loop
   90 00000020         
   91 00000020 4978            LDR              R1,=GPIO_PORTA_DATA_R
   92 00000022 680C            LDR              R4,[R1]     ;current value of s
                                                            witch
   93 00000024 F004 0410       AND              R4,R4,#0x10 ; select just bit 4
                                                            
   94 00000028 2C00            CMP              R4,#0
   95 0000002A D00A            BEQ              no          ; skip if not pushe
                                                            d
   96 0000002C 2D00            CMP              R5,#0
   97 0000002E D108            BNE              no          ; skip if pushed la
                                                            st time
   98 00000030         ; this time yes, last time no
   99 00000030 4975            LDR              R1,=Direction
  100 00000032 6808            LDR              R0,[R1]     ; current direction
                                                            
  101 00000034 F100 0001       ADD              R0,R0,#1    ;-1,0,1 to 0,1,2
  102 00000038 2802            CMP              R0,#2
  103 0000003A D101            BNE              ok
  104 0000003C F04F 30FF       MOV              R0,#-1      ; cycles through va
                                                            lues -1,0,1
  105 00000040 6008    ok      STR              R0,[R1]     ; Direction=0 (CW) 
                                                             
  106 00000042 4625    no      MOV              R5,R4       ; setup for next ti
                                                            me
  107 00000044 F000 F830       BL               Stepper_Step
  108 00000048 4870            LDR              R0,=1600000
  109 0000004A F000 F83D       BL               Wait        ; time delay fixed 
                                                            but not accurate   
                                                            
  110 0000004E E7E7            B                loop
  111 00000050         ;Initialize stepper motor interface
  112 00000050         Stepper_Init
  113 00000050 F04F 0001       MOV              R0,#1



ARM Macro Assembler    Page 7 


  114 00000054 496C            LDR              R1,=Direction
  115 00000056 6008            STR              R0,[R1]     ; Direction=0 (CW)
  116 00000058 F04F 0000       MOV              R0,#0
  117 0000005C 496C            LDR              R1,=Index
  118 0000005E 6008            STR              R0,[R1]     ; Index=0
  119 00000060         ; activate clock for Port E
  120 00000060 496C            LDR              R1, =SYSCTL_RCGCGPIO_R
  121 00000062 6808            LDR              R0, [R1]
  122 00000064 F040 0010       ORR              R0, R0, #0x10 ; Clock for E
  123 00000068 6008            STR              R0, [R1]
  124 0000006A BF00            NOP
  125 0000006C BF00            NOP                          ; allow time to fin
                                                            ish activating
  126 0000006E         ; set direction register
  127 0000006E 496A            LDR              R1, =GPIO_PORTE_DIR_R
  128 00000070 6808            LDR              R0, [R1]
  129 00000072 F040 000F       ORR              R0, R0, #0x0F 
                                                            ; Output on PE0-PE3
                                                            
  130 00000076 6008            STR              R0, [R1]
  131 00000078         ; enable digital port
  132 00000078 4968            LDR              R1, =GPIO_PORTE_DEN_R
  133 0000007A 6808            LDR              R0, [R1]
  134 0000007C F040 000F       ORR              R0, R0, #0x0F ; enable PE3-0
  135 00000080 6008            STR              R0, [R1]
  136 00000082 4770            BX               LR
  137 00000084         ;Initialize switch interface
  138 00000084         Switch_Init
  139 00000084         ; activate clock for Port A
  140 00000084 4963            LDR              R1, =SYSCTL_RCGCGPIO_R
  141 00000086 6808            LDR              R0, [R1]
  142 00000088 F040 0001       ORR              R0, R0, #0x01 ; Clock for A
  143 0000008C 6008            STR              R0, [R1]
  144 0000008E BF00            NOP
  145 00000090 BF00            NOP                          ; allow time to fin
                                                            ish activating
  146 00000092         ; set direction register
  147 00000092 4963            LDR              R1, =GPIO_PORTA_DIR_R
  148 00000094 6808            LDR              R0, [R1]
  149 00000096 F020 0010       BIC              R0, R0, #0x10 ; Input on PA4
  150 0000009A 6008            STR              R0, [R1]
  151 0000009C         ; 5) enable digital port
  152 0000009C 4961            LDR              R1, =GPIO_PORTA_DEN_R
  153 0000009E 6808            LDR              R0, [R1]
  154 000000A0 F040 0010       ORR              R0, R0, #0x10 ; enable PA4
  155 000000A4 6008            STR              R0, [R1]
  156 000000A6 4770            BX               LR
  157 000000A8         ; Step the motor clockwise
  158 000000A8         ; Direction determines the rotational direction
  159 000000A8         ; Input: None
  160 000000A8         ; Output: None
  161 000000A8         Stepper_Step
  162 000000A8 B510            PUSH             {R4,LR}
  163 000000AA 4959            LDR              R1,=Index
  164 000000AC 680A            LDR              R2,[R1]     ; old Index
  165 000000AE 4B56            LDR              R3,=Direction
  166 000000B0 6818            LDR              R0,[R3]     ; -1 for CCW, 0 for
                                                             stop 1 for CW
  167 000000B2 4402            ADD              R2,R2,R0



ARM Macro Assembler    Page 8 


  168 000000B4 F002 0203       AND              R2,R2,#3    ; 0,1,2,3,0,1,2,...
                                                            
  169 000000B8 600A            STR              R2,[R1]     ; new Index
  170 000000BA 4B5B            LDR              R3,=Stepper ; table
  171 000000BC 5CD0            LDRB             R0,[R2,R3]  ; next output: 5,6,
                                                            10,9,5,6,10,...
  172 000000BE 495B            LDR              R1,=GPIO_PORTE_DATA_R 
                                                            ; change PE3-PE0
  173 000000C0 6008            STR              R0,[R1]
  174 000000C2 F000 F838       BL               Debug_Capture
  175 000000C6 BD10            POP              {R4,PC}
  176 000000C8         ; inaccurate and inefficient time delay
  177 000000C8         Wait
  178 000000C8 1E40            SUBS             R0,R0,#1    ; outer loop
  179 000000CA D1FD            BNE              Wait
  180 000000CC 4770            BX               LR
  181 000000CE         
  182 000000CE         
  183 000000CE         
  184 000000CE         
  185 000000CE         
  186 000000CE         
  187 000000CE         
  188 000000CE         
  189 000000CE         
  190 000000CE         
  191 000000CE         
  192 000000CE         
  193 000000CE         
  194 000000CE         
  195 000000CE         
  196 000000CE         Debug_Init
  197 000000CE B51F            PUSH             {R0-R4,LR}
  198 000000D0         ; you write this
  199 000000D0 F7FF FFFE       BL               SysTick_Init
  200 000000D4         
  201 000000D4 F04F 0000       MOV              R0, #0
  202 000000D8 4955            LDR              R1, =States
  203 000000DA F04F 03FF       LDR              R3, =FULLF2
  204 000000DE         statesInitLoop
  205 000000DE EB01 0200       ADD              R2, R1, R0  ; get address of el
                                                            ement
  206 000000E2 6013            STR              R3, [R2]
  207 000000E4         
  208 000000E4         
  209 000000E4 F100 0001       ADD              R0, #1
  210 000000E8 2864            CMP              R0, #100
  211 000000EA D3F8            BLO              statesInitLoop
  212 000000EC         
  213 000000EC F04F 0000       MOV              R0, #0
  214 000000F0 4950            LDR              R1, =Times
  215 000000F2 F04F 33FF       LDR              R3, =FULLF
  216 000000F6         timesInitLoop
  217 000000F6 EB01 0280       ADD              R2, R1, R0, LSL #2 ; get addres
                                                            s of element
  218 000000FA 6013            STR              R3, [R2]
  219 000000FC         
  220 000000FC F100 0001       ADD              R0, #1
  221 00000100 2864            CMP              R0, #100



ARM Macro Assembler    Page 9 


  222 00000102 D3F8            BLO              timesInitLoop
  223 00000104         
  224 00000104         
  225 00000104         
  226 00000104 4843            LDR              R0, = SYSCTL_RCGCGPIO_R
  227 00000106 6801            LDR              R1, [R0]
  228 00000108         
  229 00000108 F041 0120       ORR              R1, R1, #0x20
  230 0000010C         
  231 0000010C 6001            STR              R1, [R0]
  232 0000010E         
  233 0000010E BF00            NOP
  234 00000110 BF00            NOP
  235 00000112 BF00            NOP
  236 00000114 BF00            NOP
  237 00000116         
  238 00000116         
  239 00000116 4848            LDR              R0, =GPIO_PORTF_DIR_R
  240 00000118 6801            LDR              R1, [R0]
  241 0000011A         
  242 0000011A F041 010E       ORR              R1, R1, #0x0E
  243 0000011E         
  244 0000011E 6001            STR              R1, [R0]
  245 00000120         
  246 00000120 4846            LDR              R0, =GPIO_PORTF_DEN_R
  247 00000122 6801            LDR              R1, [R0]
  248 00000124         
  249 00000124 F041 010E       ORR              R1, R1, #0x0E
  250 00000128         
  251 00000128 6001            STR              R1, [R0]
  252 0000012A         
  253 0000012A         
  254 0000012A 4845            LDR              R0, =GPIO_PORTF_DATA_R
  255 0000012C 6801            LDR              R1, [R0]
  256 0000012E         
  257 0000012E F041 010E       ORR              R1, R1, #0x0E
  258 00000132         
  259 00000132 6001            STR              R1, [R0]
  260 00000134         
  261 00000134         
  262 00000134         
  263 00000134         
  264 00000134 BD1F            POP              {R0-R4,PC}
  265 00000136         
  266 00000136         
  267 00000136         
  268 00000136         
  269 00000136         
  270 00000136         
  271 00000136         
  272 00000136         
  273 00000136         
  274 00000136         
  275 00000136         
  276 00000136         
  277 00000136         
  278 00000136         
  279 00000136         
  280 00000136         ;following debug method is around 63 lines of code



ARM Macro Assembler    Page 10 


  281 00000136         ; this around 126 clock cycles to run
  282 00000136         ; this method is called around once every 6400166 cycles
                        
  283 00000136         ;(this is the period of the actual program plus this deb
                       ugging method)
  284 00000136         ; dividing this out (multiplying by 12.5 ns per clock cy
                       cle), 
  285 00000136         ; we get that this method is 0.00196% intrusive in time
  286 00000136         
  287 00000136         
  288 00000136         ;Debug capture      
  289 00000136         Debug_Capture
  290 00000136 B57F            PUSH             {R0-R6,LR}
  291 00000138         ; you write this
  292 00000138 E92D 0780       PUSH             {R7-R10}
  293 0000013C         
  294 0000013C         
  295 0000013C 4841            LDR              R0, =dataIndexCount
  296 0000013E 6801            LDR              R1, [R0]    ; index of looping 
                                                            
  297 00000140         
  298 00000140 2964            CMP              R1, #100
  299 00000142 DB02            BLT              runDebug
  300 00000144         
  301 00000144 F04F 0100       MOV              R1, #0
  302 00000148 E048            B                endLED
  303 0000014A         
  304 0000014A         runDebug
  305 0000014A         
  306 0000014A 4A39            LDR              R2, =States ; address of array
  307 0000014C         
  308 0000014C EB02 0301       ADD              R3, R2, R1  ; get address of el
                                                            ement
  309 00000150         
  310 00000150 F04F 0400       MOV              R4, #0      ; init data
  311 00000154         
  312 00000154 4D2B            LDR              R5, =GPIO_PORTA_DATA_R
  313 00000156 682E            LDR              R6, [R5]
  314 00000158 F006 0610       AND              R6, #0x10   ; get PA4
  315 0000015C         
  316 0000015C EA44 0406       ORR              R4, R6
  317 00000160         
  318 00000160 4D32            LDR              R5, =GPIO_PORTE_DATA_R
  319 00000162 682E            LDR              R6, [R5]
  320 00000164 F006 060F       AND              R6, #0x0F   ; get PE3-0
  321 00000168         
  322 00000168 EA44 0406       ORR              R4, R6
  323 0000016C         
  324 0000016C 701C            STRB             R4, [R3]
  325 0000016E         
  326 0000016E         
  327 0000016E         
  328 0000016E         
  329 0000016E         
  330 0000016E 4A31            LDR              R2, =Times  ; address of array 
                                                            of times
  331 00000170         
  332 00000170 EB02 0381       ADD              R3, R2, R1, LSL #2 ; get addres
                                                            s of element



ARM Macro Assembler    Page 11 


  333 00000174         
  334 00000174 F04F 0400       MOV              R4, #0      ; init data
  335 00000178         
  336 00000178 4D33            LDR              R5, =NVIC_ST_CURRENT_R
  337 0000017A 682D            LDR              R5, [R5]    ;current time
  338 0000017C         
  339 0000017C         
  340 0000017C F06F 4C7F       LDR              R12, =MASK24BIT ; the bit mask
  341 00000180 EA05 050C       AND              R5, R12     ; only 24 bit time
  342 00000184         
  343 00000184         
  344 00000184 4E31            LDR              R6, =prevTimeMeasure ; address 
                                                            of prev time
  345 00000186         
  346 00000186 6837            LDR              R7, [R6]    ;  get previous tim
                                                            e
  347 00000188         
  348 00000188 EBB7 0805       SUBS             R8, R7, R5  ; dt = prev time - 
                                                            time
  349 0000018C D502            BPL              skipNegCaseTime
  350 0000018E         
  351 0000018E 44E0            ADD              R8, R12
  352 00000190 F108 0801       ADD              R8, #1
  353 00000194         
  354 00000194         
  355 00000194         skipNegCaseTime
  356 00000194         
  357 00000194 F8C3 8000       STR              R8, [R3]    ;  store dt to time
                                                             table
  358 00000198         
  359 00000198 6035            STR              R5, [R6]
  360 0000019A         
  361 0000019A         
  362 0000019A         
  363 0000019A 6035            STR              R5, [R6]    ; store to prev tim
                                                            e, the current time
                                                            
  364 0000019C         
  365 0000019C         
  366 0000019C F101 0101       ADD              R1, #1
  367 000001A0         
  368 000001A0 2964            CMP              R1, #100
  369 000001A2 D303            BLO              statesStoreIndex
  370 000001A4         ;MOV R1, #0
  371 000001A4         
  372 000001A4 4D29            LDR              R5, =prevTimeMeasure
  373 000001A6 F06F 467F       LDR              R6, =MASK24BIT
  374 000001AA 602E            STR              R6, [R5]
  375 000001AC         
  376 000001AC         
  377 000001AC         statesStoreIndex
  378 000001AC 6001            STR              R1,[R0]
  379 000001AE         
  380 000001AE         
  381 000001AE         
  382 000001AE F8DF C0A0       LDR              R12, =LEDCountDown
  383 000001B2 F8DC A000       LDR              R10, [R12]
  384 000001B6         
  385 000001B6 F1BA 0A01       SUBS             R10, #1



ARM Macro Assembler    Page 12 


  386 000001BA D511            BPL              endDebug
  387 000001BC         
  388 000001BC         
  389 000001BC 4820            LDR              R0, =GPIO_PORTF_DATA_R
  390 000001BE 6801            LDR              R1, [R0]
  391 000001C0 F011 010E       ANDS             R1, #0x0E
  392 000001C4         
  393 000001C4 D000            BEQ              turnLEDON
  394 000001C6 E004            B                turnLEDOFF
  395 000001C8         
  396 000001C8         turnLEDON
  397 000001C8 F041 010E       ORR              R1, R1, #0x0E
  398 000001CC F04F 0A01       MOV              R10, #1
  399 000001D0 E004            B                endLED
  400 000001D2         turnLEDOFF
  401 000001D2 F021 010E       BIC              R1, R1, #0x0E
  402 000001D6 F04F 0A02       MOV              R10, #2
  403 000001DA E7FF            B                endLED
  404 000001DC         endLED
  405 000001DC 4818            LDR              R0, =GPIO_PORTF_DATA_R
  406 000001DE 6001            STR              R1, [R0]
  407 000001E0         
  408 000001E0         endDebug
  409 000001E0 F8CC A000       STR              R10, [R12]
  410 000001E4         
  411 000001E4 E8BD 0780       POP              {R7-R10}
  412 000001E8 BD7F            POP              {R0-R6,PC}
  413 000001EA         
  414 000001EA         
  415 000001EA         
  416 000001EA         
  417 000001EA         
  418 000001EA         
  419 000001EA         
  420 000001EA         
  421 000001EA         
  422 000001EA         
  423 000001EA         
  424 000001EA         
  425 000001EA         
  426 000001EA         
  427 000001EA         
  428 000001EA         
  429 000001EA         
  430 000001EA         
  431 000001EA         
  432 000001EA         
  433 000001EA         
  434 000001EA         
  435 000001EA         
  436 000001EA         
  437 000001EA         
  438 000001EA         ; edit the following only if you need to move pins from 
                       PA4, PE3-0      
  439 000001EA         ; logic analyzer on the real board
  440 000001EA 40004040 
                       PA4     equ              0x40004040
  441 000001EA 4002403C 
                       PE30    equ              0x4002403C



ARM Macro Assembler    Page 13 


  442 000001EA 4000C000 
                       UART0_DR_R
                               equ              0x4000C000
  443 000001EA         SendDataToLogicAnalyzer
  444 000001EA 491A            LDR              R1,=PA4
  445 000001EC 6809            LDR              R1,[R1]     ; read PA4
  446 000001EE 481A            LDR              R0,=PE30    ; read PE3-PE0
  447 000001F0 6800            LDR              R0,[R0]
  448 000001F2 EA40 0001       ORR              R0,R0,R1    ;combine into one 5
                                                            -bit value
  449 000001F6 F040 0080       ORR              R0,R0,#0x80
  450 000001FA 4918            LDR              R1,=UART0_DR_R
  451 000001FC 6008            STR              R0,[R1]     ; send data at 10 k
                                                            Hz
  452 000001FE 4770            BX               LR
  453 00000200         
  454 00000200         
  455 00000200                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  456 00000200                 END                          ; end of file
              00000000 
              400043FC 
              00000000 
              00186A00 
              00000000 
              400FE608 
              40024400 
              4002451C 
              40004400 
              4000451C 
              00000000 
              400243FC 
              00000000 
              00000000 
              40025400 
              4002551C 
              400253FC 
              00000000 
              E000E018 
              00000000 
              00000000 
              40004040 
              4002403C 
              4000C000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab4 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\
5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Inclu
de\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526"
 --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\main.lst
 main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: DATA unused
Direction 00000004

Symbol: Direction
   Definitions
      At line 45 in file main.s
   Uses
      At line 99 in file main.s
      At line 114 in file main.s
      At line 165 in file main.s

Index 00000000

Symbol: Index
   Definitions
      At line 44 in file main.s
   Uses
      At line 117 in file main.s
      At line 163 in file main.s

LEDCountDown 00000208

Symbol: LEDCountDown
   Definitions
      At line 58 in file main.s
   Uses
      At line 382 in file main.s
Comment: LEDCountDown used once
Seperator 0000006C

Symbol: Seperator
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: Seperator unused
States 00000008

Symbol: States
   Definitions
      At line 50 in file main.s
   Uses
      At line 202 in file main.s
      At line 306 in file main.s

Times 00000070

Symbol: Times
   Definitions
      At line 52 in file main.s
   Uses
      At line 214 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 330 in file main.s

dataIndexCount 00000200

Symbol: dataIndexCount
   Definitions
      At line 54 in file main.s
   Uses
      At line 295 in file main.s
Comment: dataIndexCount used once
prevTimeMeasure 00000204

Symbol: prevTimeMeasure
   Definitions
      At line 56 in file main.s
   Uses
      At line 344 in file main.s
      At line 372 in file main.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 70 in file main.s
   Uses
      None
Comment: .text unused
Debug_Capture 00000136

Symbol: Debug_Capture
   Definitions
      At line 289 in file main.s
   Uses
      At line 174 in file main.s
Comment: Debug_Capture used once
Debug_Init 000000CE

Symbol: Debug_Init
   Definitions
      At line 196 in file main.s
   Uses
      At line 85 in file main.s
Comment: Debug_Init used once
SendDataToLogicAnalyzer 000001EA

Symbol: SendDataToLogicAnalyzer
   Definitions
      At line 443 in file main.s
   Uses
      At line 78 in file main.s
Comment: SendDataToLogicAnalyzer used once
Start 00000004

Symbol: Start
   Definitions
      At line 75 in file main.s
   Uses
      At line 73 in file main.s
Comment: Start used once
Stepper 00000000

Symbol: Stepper
   Definitions
      At line 72 in file main.s
   Uses
      At line 170 in file main.s
Comment: Stepper used once
Stepper_Init 00000050

Symbol: Stepper_Init
   Definitions
      At line 112 in file main.s
   Uses
      At line 82 in file main.s
Comment: Stepper_Init used once
Stepper_Step 000000A8

Symbol: Stepper_Step



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 161 in file main.s
   Uses
      At line 107 in file main.s
Comment: Stepper_Step used once
Switch_Init 00000084

Symbol: Switch_Init
   Definitions
      At line 138 in file main.s
   Uses
      At line 83 in file main.s
Comment: Switch_Init used once
Wait 000000C8

Symbol: Wait
   Definitions
      At line 177 in file main.s
   Uses
      At line 109 in file main.s
      At line 179 in file main.s

endDebug 000001E0

Symbol: endDebug
   Definitions
      At line 408 in file main.s
   Uses
      At line 386 in file main.s
Comment: endDebug used once
endLED 000001DC

Symbol: endLED
   Definitions
      At line 404 in file main.s
   Uses
      At line 302 in file main.s
      At line 399 in file main.s
      At line 403 in file main.s

loop 00000020

Symbol: loop
   Definitions
      At line 89 in file main.s
   Uses
      At line 110 in file main.s
Comment: loop used once
no 00000042

Symbol: no
   Definitions
      At line 106 in file main.s
   Uses
      At line 95 in file main.s
      At line 97 in file main.s

ok 00000040




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: ok
   Definitions
      At line 105 in file main.s
   Uses
      At line 103 in file main.s
Comment: ok used once
runDebug 0000014A

Symbol: runDebug
   Definitions
      At line 304 in file main.s
   Uses
      At line 299 in file main.s
Comment: runDebug used once
skipNegCaseTime 00000194

Symbol: skipNegCaseTime
   Definitions
      At line 355 in file main.s
   Uses
      At line 349 in file main.s
Comment: skipNegCaseTime used once
statesInitLoop 000000DE

Symbol: statesInitLoop
   Definitions
      At line 204 in file main.s
   Uses
      At line 211 in file main.s
Comment: statesInitLoop used once
statesStoreIndex 000001AC

Symbol: statesStoreIndex
   Definitions
      At line 377 in file main.s
   Uses
      At line 369 in file main.s
Comment: statesStoreIndex used once
timesInitLoop 000000F6

Symbol: timesInitLoop
   Definitions
      At line 216 in file main.s
   Uses
      At line 222 in file main.s
Comment: timesInitLoop used once
turnLEDOFF 000001D2

Symbol: turnLEDOFF
   Definitions
      At line 400 in file main.s
   Uses
      At line 394 in file main.s
Comment: turnLEDOFF used once
turnLEDON 000001C8

Symbol: turnLEDON
   Definitions
      At line 396 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 393 in file main.s
Comment: turnLEDON used once
22 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FULLF FFFFFFFF

Symbol: FULLF
   Definitions
      At line 62 in file main.s
   Uses
      At line 215 in file main.s
Comment: FULLF used once
FULLF2 000000FF

Symbol: FULLF2
   Definitions
      At line 61 in file main.s
   Uses
      At line 203 in file main.s
Comment: FULLF2 used once
GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 91 in file main.s
      At line 312 in file main.s

GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 152 in file main.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_DIR_R 40004400

Symbol: GPIO_PORTA_DIR_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 147 in file main.s
Comment: GPIO_PORTA_DIR_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 172 in file main.s
      At line 318 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 132 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 127 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 254 in file main.s
      At line 389 in file main.s
      At line 405 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 246 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 239 in file main.s
Comment: GPIO_PORTF_DIR_R used once
MASK24BIT 00FFFFFF

Symbol: MASK24BIT
   Definitions
      At line 63 in file main.s
   Uses
      At line 340 in file main.s
      At line 373 in file main.s

NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 336 in file main.s
Comment: NVIC_ST_CURRENT_R used once
PA4 40004040

Symbol: PA4
   Definitions
      At line 440 in file main.s
   Uses
      At line 444 in file main.s
Comment: PA4 used once
PE30 4002403C



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: PE30
   Definitions
      At line 441 in file main.s
   Uses
      At line 446 in file main.s
Comment: PE30 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 120 in file main.s
      At line 140 in file main.s
      At line 226 in file main.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 442 in file main.s
   Uses
      At line 450 in file main.s
Comment: UART0_DR_R used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 68 in file main.s
   Uses
      At line 199 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 67 in file main.s
   Uses
      At line 80 in file main.s
Comment: TExaS_Init used once
2 symbols
386 symbols in table
